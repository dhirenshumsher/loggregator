// This file was generated by github.com/nelsam/hel.  Do not
// edit this code by hand unless you *really* know what you're
// doing.  Expect any changes made manually to be overwritten
// the next time hel regenerates this file.

package ingress_test

import (
	"plumbing"
	v2 "plumbing/v2"
	"time"

	"golang.org/x/net/context"
)

type mockSubscriber struct {
	SubscribeCalled chan bool
	SubscribeInput  struct {
		Ctx chan context.Context
		Req chan *plumbing.SubscriptionRequest
	}
	SubscribeOutput struct {
		Recv chan func() ([]byte, error)
		Err  chan error
	}
}

func newMockSubscriber() *mockSubscriber {
	m := &mockSubscriber{}
	m.SubscribeCalled = make(chan bool, 100)
	m.SubscribeInput.Ctx = make(chan context.Context, 100)
	m.SubscribeInput.Req = make(chan *plumbing.SubscriptionRequest, 100)
	m.SubscribeOutput.Recv = make(chan func() ([]byte, error), 100)
	m.SubscribeOutput.Err = make(chan error, 100)
	return m
}
func (m *mockSubscriber) Subscribe(ctx context.Context, req *plumbing.SubscriptionRequest) (recv func() ([]byte, error), err error) {
	m.SubscribeCalled <- true
	m.SubscribeInput.Ctx <- ctx
	m.SubscribeInput.Req <- req
	return <-m.SubscribeOutput.Recv, <-m.SubscribeOutput.Err
}

type mockConverter struct {
	ConvertCalled chan bool
	ConvertInput  struct {
		Data chan []byte
	}
	ConvertOutput struct {
		Envelope chan *v2.Envelope
		Err      chan error
	}
}

func newMockConverter() *mockConverter {
	m := &mockConverter{}
	m.ConvertCalled = make(chan bool, 100)
	m.ConvertInput.Data = make(chan []byte, 100)
	m.ConvertOutput.Envelope = make(chan *v2.Envelope, 100)
	m.ConvertOutput.Err = make(chan error, 100)
	return m
}
func (m *mockConverter) Convert(data []byte) (envelope *v2.Envelope, err error) {
	m.ConvertCalled <- true
	m.ConvertInput.Data <- data
	return <-m.ConvertOutput.Envelope, <-m.ConvertOutput.Err
}

type mockContext struct {
	DeadlineCalled chan bool
	DeadlineOutput struct {
		Deadline chan time.Time
		Ok       chan bool
	}
	DoneCalled chan bool
	DoneOutput struct {
		Ret0 chan (<-chan struct{})
	}
	ErrCalled chan bool
	ErrOutput struct {
		Ret0 chan error
	}
	ValueCalled chan bool
	ValueInput  struct {
		Key chan interface{}
	}
	ValueOutput struct {
		Ret0 chan interface{}
	}
}

func newMockContext() *mockContext {
	m := &mockContext{}
	m.DeadlineCalled = make(chan bool, 100)
	m.DeadlineOutput.Deadline = make(chan time.Time, 100)
	m.DeadlineOutput.Ok = make(chan bool, 100)
	m.DoneCalled = make(chan bool, 100)
	m.DoneOutput.Ret0 = make(chan (<-chan struct{}), 100)
	m.ErrCalled = make(chan bool, 100)
	m.ErrOutput.Ret0 = make(chan error, 100)
	m.ValueCalled = make(chan bool, 100)
	m.ValueInput.Key = make(chan interface{}, 100)
	m.ValueOutput.Ret0 = make(chan interface{}, 100)
	return m
}
func (m *mockContext) Deadline() (deadline time.Time, ok bool) {
	m.DeadlineCalled <- true
	return <-m.DeadlineOutput.Deadline, <-m.DeadlineOutput.Ok
}
func (m *mockContext) Done() <-chan struct{} {
	m.DoneCalled <- true
	return <-m.DoneOutput.Ret0
}
func (m *mockContext) Err() error {
	m.ErrCalled <- true
	return <-m.ErrOutput.Ret0
}
func (m *mockContext) Value(key interface{}) interface{} {
	m.ValueCalled <- true
	m.ValueInput.Key <- key
	return <-m.ValueOutput.Ret0
}
